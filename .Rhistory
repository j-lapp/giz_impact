log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_comparison.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_baseline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results <- lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_comparison"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
####### BASELINE #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/baseline/giz_baseline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/baseline/GIZ_IE_analysis plan_all indicators_R_ordered_baseline.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_comparison.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_baseline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results <- lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_comparison"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
####### BASELINE #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/baseline/giz_baseline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/baseline/GIZ_IE_analysis plan_all indicators_R_ordered_baseline.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_comparison.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_baseline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results <- lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/baseline/results_for_request_%s_baseline.RDS",today()))
##########################################################################################
# extract the data results
data_results <- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
baseline_results <- data_results
write.csv(baseline_results,sprintf("results/baseline/AnalysisResults_longformat_%s_baseline.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
datamerge_baseline <- datamerge
#########################################
##### GIZ IMPACT ASSESSMENT  ############
#########################################
# Date: Mar/2020
# libraries
library(tidyverse)
library(lubridate)
library(parallel)
library(readxl)
##################################################################################################
############# BASELINE ###########################################################################
############# load baseline data
baseline_data <- read.csv("input/data/baseline/REACH_IRQ_GIZ_dataset_cleaned_011019_compiled_translated_clean.csv",
stringsAsFactors = F,
na.strings = c("", "na", "NA", "NaN", "#N/A"))
# column names
colname_df <- read.csv("input/col_names/baseline_colnames.csv")
names(baseline_data) <- colname_df$names_without_groups
###### prepare new variables
# as documented in analysis guidance, these security variables are calculated from other variables
baseline_data <- baseline_data %>%
mutate(security_1 = coexistence_1,
security_2 = trust_1,
security_3 = quality_4)
# complete binary for displacement status percent
baseline_data <- baseline_data %>%
mutate(Displace_Status_idp      = ifelse(is.na(Displace_Status_idp) & consent == 1, 0, Displace_Status_idp),
Displace_Status_returnee = ifelse(is.na(Displace_Status_returnee) & consent == 1, 0, Displace_Status_returnee))
# recode district name
baseline_data <- baseline_data %>%
mutate(District_GPS = case_when(
District_GPS == 1 ~ "Al-Mosul",
District_GPS == 2 ~ "Al-Hamdaniya",
District_GPS == 3 ~ "Sinjar",
District_GPS == 4 ~ 'Telafar',
District_GPS == 5 ~ 'Tilkaef',
TRUE ~ NA_character_))
# displacement status
baseline_data <- baseline_data %>%
mutate(final_displace_status = case_when(
calc_idp      == 1 & consent == 1 ~ "idp",
calc_returnee == 1 & consent == 1 ~ "returnee",
calc_remainee == 1 & consent == 1 ~ "remainee",
consent == 1 ~ 'moved_other_reason',
TRUE ~ NA_character_))
########## recode likert vars ####################
# recode functions
# reverse negatively worded questions
recode_neg <- function (x) {
recode_factor(x, `1`=5, `2`=4, `3`=3, `4`=2, `5`=1, .default = NA_real_)
}
# categorize into disagree, neutral, agree
recode_binary <- function (x) {
recode_factor(x, `1`="negative", `2`="negative", `4`="positive", `5`="positive", .default = NA_character_)
}
# import likert vars
likert_baseline <- read.csv("input/col_names/likert_var.csv") %>%
filter(baseline_endline == "both")
# positive likert_baseline
likert_var_pos <- likert_baseline %>%
filter(pos_neg == "pos")%>%
column_to_rownames(var = "likert_var") %>%
row.names()
# negative variables
likert_var_neg <- likert_baseline %>%
filter(pos_neg == "neg")%>%
column_to_rownames(var = "likert_var") %>%
row.names()
# new df for likert var, reversing negatively worded questions
likert_var_rev <- baseline_data %>%
select(X_uuid, all_of(likert_var_neg))%>%
mutate_at(likert_var_neg, recode_neg)
colnames(likert_var_rev) <- paste0(colnames(likert_var_rev), "_reversed")
colnames(likert_var_rev)[1] <- "X_uuid"
# join to dataset
baseline_data <- baseline_data %>%
left_join(likert_var_rev, by = "X_uuid")
####### new df for likert var categorized
likert_var_cat <- baseline_data %>%
select(X_uuid, all_of(likert_var_pos))%>%
mutate_at(likert_var_pos, recode_binary)
colnames(likert_var_cat) <- paste0(colnames(likert_var_cat), "_cat")
colnames(likert_var_cat)[1] <- "X_uuid"
######## join to dataset
baseline_data <- baseline_data %>%
left_join(likert_var_cat, by = "X_uuid")
############################################
# write recoded dataset for use in analysis
write_excel_csv(baseline_data, "input/data/recoded/baseline/giz_baseline_recoded_data.csv")
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_comparison"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
####### BASELINE #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/baseline/giz_baseline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/baseline/GIZ_IE_analysis plan_all indicators_R_ordered_baseline.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_comparison.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_baseline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results <- lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/baseline/results_for_request_%s_baseline.RDS",today()))
##########################################################################################
# extract the data results
data_results <- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
baseline_results <- data_results
write.csv(baseline_results,sprintf("results/baseline/AnalysisResults_longformat_%s_baseline.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
datamerge_baseline <- datamerge
####### ENDLINE DATA ANALYZING ONLY FOR SAME INDICATORS #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/endline/giz_endline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_endline_comp.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results<-lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/endline/results_for_request_%s_endline_comp.RDS",today()))
##########################################################################################
# extract the data results
data_results<- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
endline_results <- data_results
comparison_results <- bind_rows(datamerge_baseline,endline_results)
write.csv(comparison_results,sprintf("results/endline/GIZ_AnalysisResults_longformat_%s_endline_comp.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
datamerge_endline <- datamerge
comparison_datamerge <- bind_rows(datamerge_baseline,datamerge_endline)
write.csv(comparison_datamerge,sprintf("datamerge/datamerge_format_%s_comparison.csv",today()), row.names = FALSE)
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_comparison"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
####### BASELINE #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/baseline/giz_baseline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/baseline/GIZ_IE_analysis plan_all indicators_R_ordered_baseline.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_comparison.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_baseline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results <- lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/baseline/results_for_request_%s_baseline.RDS",today()))
##########################################################################################
# extract the data results
data_results <- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
baseline_results <- data_results
write.csv(baseline_results,sprintf("results/baseline/AnalysisResults_longformat_%s_baseline.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
datamerge_baseline <- datamerge
####### ENDLINE DATA ANALYZING ONLY FOR SAME INDICATORS #########
##########################################################################################
# get the data
data <- read.csv("input/data/recoded/endline/giz_endline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_endline_comp.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results<-lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/endline/results_for_request_%s_endline_comp.RDS",today()))
##########################################################################################
# extract the data results
data_results<- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
endline_results <- data_results
write.csv(endline_results,sprintf("results/endline/GIZ_AnalysisResults_longformat_%s_endline_comp.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
datamerge_endline <- datamerge
comparison_datamerge <- bind_rows(datamerge_baseline,datamerge_endline)
write.csv(comparison_datamerge,sprintf("datamerge/datamerge_format_%s_comparison.csv",today()), row.names = FALSE)
View(log)
#########################################
##### GIZ IMPACT ASSESSMENT  ############
#########################################
# Date: Mar/2020
# libraries
library(tidyverse)
library(lubridate)
library(parallel)
library(readxl)
##################################################################################################
############# ENDLINE ###########################################################################
############# load endline data
endline_data <- read.csv("input/data/endline/REACH_IRQ_GIZ_HH_Survey_February2020_analysis purpose.csv",
stringsAsFactors = F,
na.strings = c("", "na", "NA", "NaN", "#N/A"))
# column names
colname_df <- read.csv("input/col_names/endline_colnames.csv")
names(endline_data) <- colname_df$names_without_groups
###### prepare new variables
# as documented in analysis guidance, these security variables are calculated from other variables
endline_data <- endline_data %>%
mutate(security_1 = coexistence_1,
security_2 = trust_1,
security_3 = quality_4)
# complete binary for displacement status percent
endline_data <- endline_data %>%
mutate(Displace_Status_idp      = ifelse(is.na(Displace_Status_idp) & consent == 1, 0, Displace_Status_idp),
Displace_Status_returnee = ifelse(is.na(Displace_Status_returnee) & consent == 1, 0, Displace_Status_returnee))
# displacement status
endline_data <- endline_data %>%
mutate(final_displace_status = case_when(
calc_idp      == 1 & consent == 1 ~ "idp",
calc_returnee == 1 & consent == 1 ~ "returnee",
calc_remainee == 1 & consent == 1 ~ "remainee",
consent == 1 ~ 'moved_other_reason',
TRUE ~ NA_character_))
############## recode likert vars ####################
# recode functions
# reverse negatively worded questions
recode_neg <- function (x) {
recode_factor(x, `1`=5, `2`=4, `3`=3, `4`=2, `5`=1, .default = NA_real_)
}
# categorize into disagree, neutral, agree
recode_binary <- function (x) {
recode_factor(x, `1`="negative", `2`="negative", `4`="positive", `5`="positive", .default = NA_character_)
}
# import likert vars
likert <- read.csv("input/col_names/likert_var.csv")
# positive variables
likert_var_pos <- likert %>%
filter(pos_neg == "pos")%>%
column_to_rownames(var = "likert_var") %>%
row.names()
# negative variables
likert_var_neg <- likert %>%
filter(pos_neg == "neg")%>%
column_to_rownames(var = "likert_var") %>%
row.names()
# new df for likert var, reversing negatively worded questions
likert_var_rev <- endline_data %>%
select(X_uuid, all_of(likert_var_neg))%>%
mutate_at(likert_var_neg, recode_neg)
colnames(likert_var_rev) <- paste0(colnames(likert_var_rev), "_reversed")
colnames(likert_var_rev)[1] <- "X_uuid"
# join to dataset
endline_data <- endline_data %>%
left_join(likert_var_rev, by = "X_uuid")
####### new df for likert var categorized into positive and negative sentiments
likert_var_cat <- endline_data %>%
select(X_uuid, all_of(likert_var_pos))%>%
mutate_at(likert_var_pos, recode_binary)
colnames(likert_var_cat) <- paste0(colnames(likert_var_cat), "_cat")
colnames(likert_var_cat)[1] <- "X_uuid"
# join to dataset
endline_data <- endline_data %>%
left_join(likert_var_cat, by = "X_uuid")
############################################
# write recoded dataset for use in analysis
write.csv(endline_data, "input/data/recoded/endline/giz_endline_recoded_data.csv", row.names = F)
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_endline"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
##########################################################################################
####### ENDLINE #########
# get the data
data <- read.csv("input/data/recoded/endline/giz_endline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/endline/GIZ_IE_analysis plan_all indicators_R_correct order.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_endline.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_endline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results<-lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/endline/results_for_request_%s_%s_%s.RDS",today(),lang,session))
##########################################################################################
# extract the data results
data_results<- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
write.csv(data_results,sprintf("results/endline/GIZ_AnalysisResults_longformat_%s_endline.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
write.csv(datamerge,sprintf("datamerge/endline/datamerge_format_%s_endline.csv",today()), row.names = FALSE)
View(analysis.params)
?boom_rmd
source("R/functions/small_function.r")
source("R/functions/surveymodule.r")
session<-"GIZ_2020_endline"
lang="english"
library(dplyr);library(scales);library(readxl);library(srvyr)
##########################################################################################
####### ENDLINE #########
# get the data
data <- read.csv("input/data/recoded/endline/giz_endline_recoded_data.csv",check.names=F)
names(data) <- gsub(x = names(data), pattern = "\\.", replacement = "/")
# Load Analysis Plan
log <- read_excel("input/analysisplan/endline/GIZ_IE_analysis plan_all indicators_R_correct order.xlsx")
log$analysis_key<-paste0(log$xi,"/",log$yi)
questions <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'survey')
choices   <- read_excel("input/questionnaire/endline/REACH_IRQ_GIZ_HH_survey_FINAL.xlsx", sheet = 'choices')
sampling_frame <- read.csv("input/sampling_frame/GIZ_sampling_frame_endline.csv")
data <- create_weights(sampling_frame, data)
# export to check weights
write.csv(data,"input/data/data_w_weight_endline.csv")
# load the parameters
analysis.params<-parametres(data,log,questions=questions,choices=choices,lang=lang)
check_param(analysis.params)
##########################################################################################
# process the results
results<-lapply(seq_along(analysis.params$xi),boom_rmd,params=analysis.params)
check_create_directory("RDS")
saveRDS(results,sprintf("RDS/endline/results_for_request_%s_%s_%s.RDS",today(),lang,session))
##########################################################################################
# extract the data results
data_results<- lapply(results, function(x){x$data}) %>% do.call(rbind.fill,.)
write.csv(data_results,sprintf("results/endline/GIZ_AnalysisResults_longformat_%s_endline.csv",today()), row.names = FALSE)
##########################################################################################
# create data merge
source("R/functions/function_data_merge.R")
check_create_directory("datamerge")
mergelevel<-unique(log$yi)
lapply(mergelevel,function(mergelevel,data_results){
torank <- NULL
# extract results for chosen level
res<-data_results[data_results$yi==mergelevel,]
datamerge<-create_the_data_merge(results=res,label="variable_label",vartorank=torank)
datamerge$level<-mergelevel
return(datamerge)
},data_results=data_results) %>% bind_rows -> datamerge
write.csv(datamerge,sprintf("datamerge/endline/datamerge_format_%s_endline.csv",today()), row.names = FALSE)
